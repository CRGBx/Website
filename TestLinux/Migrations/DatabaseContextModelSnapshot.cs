// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestLinux.Models;

namespace TestLinux.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.9");

            modelBuilder.Entity("TestLinux.AttendanceProfie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Attendance")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ForDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LatLong")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("MarkDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Attendances");
                });

            modelBuilder.Entity("TestLinux.BranchMaster", b =>
                {
                    b.Property<string>("BrCode")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RO")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("BrCode");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("TestLinux.BranchPerformance", b =>
                {
                    b.Property<string>("BranchCode")
                        .HasColumnType("varchar(255)");

                    b.Property<float>("AdvanceLastDay")
                        .HasColumnType("float");

                    b.Property<float>("AdvanceLastFy")
                        .HasColumnType("float");

                    b.Property<float>("AdvanceLastMonth")
                        .HasColumnType("float");

                    b.Property<float>("AdvanceLastQuarter")
                        .HasColumnType("float");

                    b.Property<float>("AdvancePrevFy")
                        .HasColumnType("float");

                    b.Property<float>("AgriLastDay")
                        .HasColumnType("float");

                    b.Property<float>("AgriLastFy")
                        .HasColumnType("float");

                    b.Property<float>("AgriLastMonth")
                        .HasColumnType("float");

                    b.Property<float>("AgriLastQuarter")
                        .HasColumnType("float");

                    b.Property<float>("AgriPrevFy")
                        .HasColumnType("float");

                    b.Property<float>("CASALastDay")
                        .HasColumnType("float");

                    b.Property<float>("CASALastFy")
                        .HasColumnType("float");

                    b.Property<float>("CASALastMonth")
                        .HasColumnType("float");

                    b.Property<float>("CASALastQuarter")
                        .HasColumnType("float");

                    b.Property<float>("CASAPrevFy")
                        .HasColumnType("float");

                    b.Property<float>("CarLastDay")
                        .HasColumnType("float");

                    b.Property<float>("CarLastFy")
                        .HasColumnType("float");

                    b.Property<float>("CarLastMonth")
                        .HasColumnType("float");

                    b.Property<float>("CarLastQuarter")
                        .HasColumnType("float");

                    b.Property<float>("CarPrevFy")
                        .HasColumnType("float");

                    b.Property<float>("DepositLastDay")
                        .HasColumnType("float");

                    b.Property<float>("DepositLastFy")
                        .HasColumnType("float");

                    b.Property<float>("DepositLastMonth")
                        .HasColumnType("float");

                    b.Property<float>("DepositLastQuarter")
                        .HasColumnType("float");

                    b.Property<float>("DepositPrevFy")
                        .HasColumnType("float");

                    b.Property<float>("GoldLastDay")
                        .HasColumnType("float");

                    b.Property<float>("GoldLastFy")
                        .HasColumnType("float");

                    b.Property<float>("GoldLastMonth")
                        .HasColumnType("float");

                    b.Property<float>("GoldLastQuarter")
                        .HasColumnType("float");

                    b.Property<float>("GoldPrevFy")
                        .HasColumnType("float");

                    b.Property<float>("HLLastDay")
                        .HasColumnType("float");

                    b.Property<float>("HLLastFy")
                        .HasColumnType("float");

                    b.Property<float>("HLLastMonth")
                        .HasColumnType("float");

                    b.Property<float>("HLLastQuarter")
                        .HasColumnType("float");

                    b.Property<float>("HLPrevFy")
                        .HasColumnType("float");

                    b.Property<float>("KCCLastDay")
                        .HasColumnType("float");

                    b.Property<float>("KCCLastFy")
                        .HasColumnType("float");

                    b.Property<float>("KCCLastMonth")
                        .HasColumnType("float");

                    b.Property<float>("KCCLastQuarter")
                        .HasColumnType("float");

                    b.Property<float>("KCCPrevFy")
                        .HasColumnType("float");

                    b.Property<float>("NPALastDay")
                        .HasColumnType("float");

                    b.Property<float>("NPALastFy")
                        .HasColumnType("float");

                    b.Property<float>("NPALastMonth")
                        .HasColumnType("float");

                    b.Property<float>("NPALastQuarter")
                        .HasColumnType("float");

                    b.Property<float>("NPAPrevFy")
                        .HasColumnType("float");

                    b.Property<float>("NRLMLastDay")
                        .HasColumnType("float");

                    b.Property<float>("NRLMLastFy")
                        .HasColumnType("float");

                    b.Property<float>("NRLMLastMonth")
                        .HasColumnType("float");

                    b.Property<float>("NRLMLastQuarter")
                        .HasColumnType("float");

                    b.Property<float>("NRLMPrevFy")
                        .HasColumnType("float");

                    b.Property<float>("PLLastDay")
                        .HasColumnType("float");

                    b.Property<float>("PLLastFy")
                        .HasColumnType("float");

                    b.Property<float>("PLLastMonth")
                        .HasColumnType("float");

                    b.Property<float>("PLLastQuarter")
                        .HasColumnType("float");

                    b.Property<float>("PLPrevFy")
                        .HasColumnType("float");

                    b.Property<float>("PerLastDay")
                        .HasColumnType("float");

                    b.Property<float>("PerLastFy")
                        .HasColumnType("float");

                    b.Property<float>("PerLastMonth")
                        .HasColumnType("float");

                    b.Property<float>("PerLastQuarter")
                        .HasColumnType("float");

                    b.Property<float>("PerPrevFy")
                        .HasColumnType("float");

                    b.Property<float>("SMELLastDay")
                        .HasColumnType("float");

                    b.Property<float>("SMELLastFy")
                        .HasColumnType("float");

                    b.Property<float>("SMELLastMonth")
                        .HasColumnType("float");

                    b.Property<float>("SMELLastQuarter")
                        .HasColumnType("float");

                    b.Property<float>("SMELPrevFy")
                        .HasColumnType("float");

                    b.Property<float>("SMELastDay")
                        .HasColumnType("float");

                    b.Property<float>("SMELastFy")
                        .HasColumnType("float");

                    b.Property<float>("SMELastMonth")
                        .HasColumnType("float");

                    b.Property<float>("SMELastQuarter")
                        .HasColumnType("float");

                    b.Property<float>("SMEPrevFy")
                        .HasColumnType("float");

                    b.HasKey("BranchCode");

                    b.ToTable("BranchPerformances");
                });

            modelBuilder.Entity("TestLinux.CSPVisit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CSPId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("ClosureDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ClosureOfficialId")
                        .HasColumnType("longtext");

                    b.Property<string>("Location_lat")
                        .HasColumnType("longtext");

                    b.Property<string>("Location_long")
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("SystemLogDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("VisitDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("VisitRemarks")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CSPId");

                    b.HasIndex("UserId");

                    b.ToTable("CSPVisits");
                });

            modelBuilder.Entity("TestLinux.Csp", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("BrCode")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CSPName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CorporateAgency")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("UserId");

                    b.HasIndex("BrCode");

                    b.ToTable("Csps");
                });

            modelBuilder.Entity("TestLinux.DeafData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Branch")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Cust_Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Deafs");
                });

            modelBuilder.Entity("TestLinux.EmployeeMaster", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("BranchCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("EmployeeName")
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Role1")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Role2")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Scale")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("UserId");

                    b.ToTable("EmployeeMasters");
                });

            modelBuilder.Entity("TestLinux.Grievance", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("longtext");

                    b.Property<float>("AmountInvolved")
                        .HasColumnType("float");

                    b.Property<string>("ApplicantName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("BrReplyDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("BrReplyId")
                        .HasColumnType("longtext");

                    b.Property<string>("Branch")
                        .HasColumnType("longtext");

                    b.Property<string>("CheckerReply")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CheckerReplyDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CheckerReplyId")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ClosureDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Complaint")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ComplaintChannel")
                        .HasColumnType("longtext");

                    b.Property<string>("ComplaintType")
                        .HasColumnType("longtext");

                    b.Property<string>("DigitalTxn")
                        .HasColumnType("longtext");

                    b.Property<string>("District")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("HOReply")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("HOReplyDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("HOReplyId")
                        .HasColumnType("longtext");

                    b.Property<string>("InternalReply")
                        .HasColumnType("longtext");

                    b.Property<string>("MobileNo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("RO")
                        .HasColumnType("longtext");

                    b.Property<string>("ROReply")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ROReplyDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ROReplyId")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Reply")
                        .HasColumnType("longtext");

                    b.Property<string>("Segment")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("TransactionDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Grievances");
                });

            modelBuilder.Entity("TestLinux.LearningData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<string>("Heading")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Learnings");
                });

            modelBuilder.Entity("TestLinux.Logs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("LogDateTime")
                        .HasColumnType("longtext");

                    b.Property<string>("Remarks")
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("TestLinux.OTP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Application")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("IsUsed")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("OTPValue")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("OTPs");
                });

            modelBuilder.Entity("TestLinux.PostInspection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ClosureDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ClosureOfficialId")
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("SystemLogDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("VisitDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("VisitRemarks")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("PostInspections");
                });

            modelBuilder.Entity("TestLinux.PostValueStatement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("InputType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Statement")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("PostInspectionValueStatements");
                });

            modelBuilder.Entity("TestLinux.PostVisitRemark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("RemarksVerifyingOfficial")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RemarksVisitingOfficial")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ValueStatementId")
                        .HasColumnType("int");

                    b.Property<int>("VisitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PostIsnpectionRemarks");
                });

            modelBuilder.Entity("TestLinux.PreInspection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ApplicationId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ClosureDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ClosureOfficialId")
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("SystemLogDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("VisitDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("VisitRemarks")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("PreInspection");
                });

            modelBuilder.Entity("TestLinux.PreValueStatement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("InputType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Statement")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("PreInspectionValueStatements");
                });

            modelBuilder.Entity("TestLinux.PreVisitRemark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("RemarksVerifyingOfficial")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RemarksVisitingOfficial")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ValueStatementId")
                        .HasColumnType("int");

                    b.Property<int>("VisitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PreIsnpectionRemarks");
                });

            modelBuilder.Entity("TestLinux.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RegionalOffice")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TestLinux.UserProfile", b =>
                {
                    b.Property<string>("MobileNumber")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Posting")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("MobileNumber");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("TestLinux.ValueStatement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("InputType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Statement")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("CSPValueStatements");
                });

            modelBuilder.Entity("TestLinux.VisitRemark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("RemarksVerifyingOfficial")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RemarksVisitingOfficial")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ValueStatementId")
                        .HasColumnType("int");

                    b.Property<int>("VisitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("VisitRemarks");
                });

            modelBuilder.Entity("TestLinux.CSPVisit", b =>
                {
                    b.HasOne("TestLinux.Csp", "Csp")
                        .WithMany()
                        .HasForeignKey("CSPId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestLinux.EmployeeMaster", "EmployeeMaster")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Csp");

                    b.Navigation("EmployeeMaster");
                });

            modelBuilder.Entity("TestLinux.Csp", b =>
                {
                    b.HasOne("TestLinux.BranchMaster", "BranchMaster")
                        .WithMany()
                        .HasForeignKey("BrCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BranchMaster");
                });
#pragma warning restore 612, 618
        }
    }
}
